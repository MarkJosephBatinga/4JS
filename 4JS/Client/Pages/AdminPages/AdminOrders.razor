@page "/admin/orders"
@layout AdminAuthLayout
@attribute [Authorize(Roles = "admin")]
@inject IOrderService OrderService
@inject IToastService Toast

<section class="admin-body px-3 px-md-5 my-3">
    <div class="top-container d-flex align-items-center px-lg-5">
        <div class="left-box d-flex align-items-center me-auto">
            <a class="btn-cancel" href="/admin/dashboard">Cancel</a>
        </div>
        <div class="right-box">
            <h3 class="title-text">Orders</h3>
        </div>
    </div>
    <div class="lower-container">
        <div class="table-box">
            <table class="styled-table">
                <thead>
                    <tr>
                        <th>Full Name</th>
                        <th>Address</th>
                        <th>Book Title</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Orders)
                    {
                        <tr>
                            <td>@order.FullName</td>
                            <td>@order.Address</td>
                            <td>@order.BookName</td>
                            <td>@order.Price</td>
                            <td>
                                <button type="button" class="trans-btn" @onclick="() => OnComplete(order)">Completed</button>
                                <button type="button" class="trans-btn" @onclick="() => OnDelete(order)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

@code {
    List<Order> Orders = new List<Order>();

    protected async override Task OnInitializedAsync()
    {
        Orders = await OrderService.GetAllOrder();
    }

    private async Task OnDelete(Order order)
    {
        var result = await OrderService.DeleteOrder(order);
        Toast.ShowSuccess("Order Successfully Deleted", "Deleted");
        Orders = result;
    } 
    
    private async Task OnComplete(Order order)
    {
        var result = await OrderService.DeleteOrder(order);
        Toast.ShowSuccess("Order Successfully Completed", "Completed");
        Orders = result;
    }
}