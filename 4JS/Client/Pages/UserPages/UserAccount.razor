@page "/user/account"
@attribute [Authorize(Roles = "user")]
@layout UserAuthLayout
@inject ILocalStorageService LocalStorage
@inject ILoginService LoginService
@inject IUserService UserService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider Authentication
@inject IToastService Toast

<section class="main-body px-3 px-md-5 my-3">
    <div class="login-container row">
        <h3 class="login-title">@user.email</h3>
        <div class="title-box col-xl d-flex flex-column justify-content-center align-items-center">
            <img src="./css/images/user.png" alt="Login" class="acc-img">
        </div>
        <div class=" col-xl d-flex justify-content-center align-items-center">
            <div class="form-box d-flex flex-column align-items-center">
                <div class="form-wrap">
                    <h3 class="form-title">Reader's Information</h3>
                    <p class="form-label">Full Name</p>
                    <h3 class="form-input">@user.FirstName @user.LastName</h3>
                    <p class="form-label">Address</p>
                    <h3 class="form-input">@user.Address</h3>
                    <p class="form-label">Phone Number</p>
                    <h3 class="form-input">@user.Phone</h3>
                    <p class="form-label">EMAIL</p>
                    <h3 class="form-input">@user.email</h3>
                    <p class="form-label">PASSWORD</p>
                    <h3 class="form-input">******</h3>
                </div>
                <div class="signup-box d-flex align-items-center justify-content-center mt-5 px-md-5">
                    <button class="user-btn me-4" @onclick="OnUpdate">Update</button>
                    <button class="user-btn" @onclick="OnDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    User user = new User();

    protected async override Task OnInitializedAsync()
    {
        var username = await LocalStorage.GetItemAsStringAsync("username");
        user = await LoginService.GetUser(username);
    }

    private void OnUpdate()
    {
        NavManager.NavigateTo("/user/account/update");
    }

    private async Task OnDelete()
    {
        await UserService.DeleteUser(user);
        Toast.ShowSuccess("Account Successfully Deleted", "Deleted");
        await LocalStorage.RemoveItemAsync("username");
        await LocalStorage.RemoveItemAsync("role");
        await Authentication.GetAuthenticationStateAsync();
        NavManager.NavigateTo("");
    }
}
